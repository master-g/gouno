// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal.proto

package pb // import "github.com/master-g/gouno/api/pb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FrameType int32

const (
	FrameType_Message FrameType = 0
	FrameType_Kick    FrameType = 1
	FrameType_Ping    FrameType = 2
)

var FrameType_name = map[int32]string{
	0: "Message",
	1: "Kick",
	2: "Ping",
}
var FrameType_value = map[string]int32{
	"Message": 0,
	"Kick":    1,
	"Ping":    2,
}

func (x FrameType) String() string {
	return proto.EnumName(FrameType_name, int32(x))
}
func (FrameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_internal_b41568d976c37762, []int{0}
}

type Frame struct {
	Type                 FrameType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.internal.FrameType" json:"type,omitempty"`
	Cmd                  int32     `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Status               int32     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Message              string    `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Body                 []byte    `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Frame) Reset()         { *m = Frame{} }
func (m *Frame) String() string { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()    {}
func (*Frame) Descriptor() ([]byte, []int) {
	return fileDescriptor_internal_b41568d976c37762, []int{0}
}
func (m *Frame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Frame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Frame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Frame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Frame.Merge(dst, src)
}
func (m *Frame) XXX_Size() int {
	return m.Size()
}
func (m *Frame) XXX_DiscardUnknown() {
	xxx_messageInfo_Frame.DiscardUnknown(m)
}

var xxx_messageInfo_Frame proto.InternalMessageInfo

func (m *Frame) GetType() FrameType {
	if m != nil {
		return m.Type
	}
	return FrameType_Message
}

func (m *Frame) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *Frame) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Frame) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Frame) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Frame)(nil), "proto.internal.Frame")
	proto.RegisterEnum("proto.internal.FrameType", FrameType_name, FrameType_value)
}
func (m *Frame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Frame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Type))
	}
	if m.Cmd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Cmd))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Frame) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovInternal(uint64(m.Type))
	}
	if m.Cmd != 0 {
		n += 1 + sovInternal(uint64(m.Cmd))
	}
	if m.Status != 0 {
		n += 1 + sovInternal(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Frame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Frame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Frame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FrameType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("internal.proto", fileDescriptor_internal_b41568d976c37762) }

var fileDescriptor_internal_b41568d976c37762 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x4f, 0x4a, 0xc4, 0x30,
	0x14, 0xc6, 0x7d, 0x33, 0xed, 0x8c, 0xf3, 0x1c, 0x4a, 0xc9, 0x42, 0xa2, 0x8b, 0x52, 0x5c, 0x15,
	0x71, 0x52, 0xd0, 0x1b, 0xb8, 0x70, 0x23, 0x82, 0x14, 0x57, 0xee, 0xd2, 0x4e, 0x88, 0x41, 0xf3,
	0x87, 0x26, 0x5d, 0xf4, 0x12, 0x9e, 0xcb, 0xa5, 0x47, 0x90, 0x9e, 0x44, 0x26, 0xe3, 0x08, 0xb3,
	0xca, 0xef, 0xfb, 0xf2, 0x7b, 0x3c, 0x1e, 0x66, 0xca, 0x04, 0xd1, 0x1b, 0xfe, 0xc1, 0x5c, 0x6f,
	0x83, 0x25, 0x59, 0x7c, 0xd8, 0xa1, 0xbd, 0x5c, 0x77, 0x56, 0x6b, 0x6b, 0xf6, 0xbf, 0x57, 0x9f,
	0x80, 0xe9, 0x43, 0xcf, 0xb5, 0x20, 0x1b, 0x4c, 0xc2, 0xe8, 0x04, 0x85, 0x12, 0xaa, 0xec, 0xf6,
	0x82, 0x1d, 0x8f, 0xb1, 0x28, 0xbd, 0x8c, 0x4e, 0x34, 0x51, 0x23, 0x39, 0xce, 0x3b, 0xbd, 0xa5,
	0xb3, 0x12, 0xaa, 0xb4, 0xd9, 0x21, 0x39, 0xc7, 0x85, 0x0f, 0x3c, 0x0c, 0x9e, 0xce, 0x63, 0xf9,
	0x97, 0x08, 0xc5, 0xa5, 0x16, 0xde, 0x73, 0x29, 0x68, 0x52, 0x42, 0xb5, 0x6a, 0x0e, 0x91, 0x10,
	0x4c, 0x5a, 0xbb, 0x1d, 0x69, 0x5a, 0x42, 0xb5, 0x6e, 0x22, 0x5f, 0xdf, 0xe0, 0xea, 0x7f, 0x15,
	0x39, 0xc3, 0xe5, 0xd3, 0xde, 0xcd, 0x4f, 0xc8, 0x29, 0x26, 0x8f, 0xaa, 0x7b, 0xcf, 0x61, 0x47,
	0xcf, 0xca, 0xc8, 0x7c, 0x76, 0xcf, 0xbe, 0xa6, 0x02, 0xbe, 0xa7, 0x02, 0x7e, 0xa6, 0x02, 0x5e,
	0x4b, 0xa9, 0xc2, 0xdb, 0xd0, 0xb2, 0xce, 0xea, 0x5a, 0x73, 0x1f, 0x44, 0xbf, 0x91, 0xb5, 0xb4,
	0x83, 0xb1, 0x35, 0x77, 0xaa, 0x76, 0x6d, 0xbb, 0x88, 0x57, 0xdd, 0xfd, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x05, 0x1b, 0xff, 0x9c, 0x25, 0x01, 0x00, 0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

package pb // import "github.com/master-g/gouno/api/pb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Command Codes
// S -> C : even
// C -> S : odd
type GameCmd int32

const (
	GameCmd_GAME_RESERVED   GameCmd = 0
	GameCmd_ENTER_GAME_REQ  GameCmd = 8193
	GameCmd_ENTER_GAME_RESP GameCmd = 8194
	GameCmd_ACTION_REQ      GameCmd = 8195
	GameCmd_ACTION_RESP     GameCmd = 8196
	GameCmd_EVENT_NTY       GameCmd = 8198
	GameCmd_PLAYER_JOIN_NTY GameCmd = 8200
	GameCmd_PLAYER_LEFT_NTY GameCmd = 8202
	GameCmd_GAME_START_NTY  GameCmd = 8204
	GameCmd_GAME_OVER_NTY   GameCmd = 8206
)

var GameCmd_name = map[int32]string{
	0:    "GAME_RESERVED",
	8193: "ENTER_GAME_REQ",
	8194: "ENTER_GAME_RESP",
	8195: "ACTION_REQ",
	8196: "ACTION_RESP",
	8198: "EVENT_NTY",
	8200: "PLAYER_JOIN_NTY",
	8202: "PLAYER_LEFT_NTY",
	8204: "GAME_START_NTY",
	8206: "GAME_OVER_NTY",
}
var GameCmd_value = map[string]int32{
	"GAME_RESERVED":   0,
	"ENTER_GAME_REQ":  8193,
	"ENTER_GAME_RESP": 8194,
	"ACTION_REQ":      8195,
	"ACTION_RESP":     8196,
	"EVENT_NTY":       8198,
	"PLAYER_JOIN_NTY": 8200,
	"PLAYER_LEFT_NTY": 8202,
	"GAME_START_NTY":  8204,
	"GAME_OVER_NTY":   8206,
}

func (x GameCmd) String() string {
	return proto.EnumName(GameCmd_name, int32(x))
}
func (GameCmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{0}
}

type Event int32

const (
	Event_EVENT_RESERVED          Event = 0
	Event_EVENT_TURN              Event = 1
	Event_EVENT_PLAY              Event = 2
	Event_EVENT_UNO_PLAY          Event = 3
	Event_EVENT_DRAW              Event = 4
	Event_EVENT_KEEP              Event = 5
	Event_EVENT_SKIP              Event = 6
	Event_EVENT_CHALLENGE         Event = 7
	Event_EVENT_CHALLENGE_PENALTY Event = 8
	Event_EVENT_TIMEOUT           Event = 9
	Event_EVENT_DECK_SHUFFLE      Event = 10
	Event_EVENT_REVERSE           Event = 11
)

var Event_name = map[int32]string{
	0:  "EVENT_RESERVED",
	1:  "EVENT_TURN",
	2:  "EVENT_PLAY",
	3:  "EVENT_UNO_PLAY",
	4:  "EVENT_DRAW",
	5:  "EVENT_KEEP",
	6:  "EVENT_SKIP",
	7:  "EVENT_CHALLENGE",
	8:  "EVENT_CHALLENGE_PENALTY",
	9:  "EVENT_TIMEOUT",
	10: "EVENT_DECK_SHUFFLE",
	11: "EVENT_REVERSE",
}
var Event_value = map[string]int32{
	"EVENT_RESERVED":          0,
	"EVENT_TURN":              1,
	"EVENT_PLAY":              2,
	"EVENT_UNO_PLAY":          3,
	"EVENT_DRAW":              4,
	"EVENT_KEEP":              5,
	"EVENT_SKIP":              6,
	"EVENT_CHALLENGE":         7,
	"EVENT_CHALLENGE_PENALTY": 8,
	"EVENT_TIMEOUT":           9,
	"EVENT_DECK_SHUFFLE":      10,
	"EVENT_REVERSE":           11,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{1}
}

type Action int32

const (
	Action_ACTION_RESERVED  Action = 0
	Action_ACTION_PLAY      Action = 1
	Action_ACTION_UNO_PLAY  Action = 2
	Action_ACTION_DRAW      Action = 3
	Action_ACTION_KEEP      Action = 4
	Action_ACTION_CHALLENGE Action = 5
	Action_ACTION_ACCEPT    Action = 6
)

var Action_name = map[int32]string{
	0: "ACTION_RESERVED",
	1: "ACTION_PLAY",
	2: "ACTION_UNO_PLAY",
	3: "ACTION_DRAW",
	4: "ACTION_KEEP",
	5: "ACTION_CHALLENGE",
	6: "ACTION_ACCEPT",
}
var Action_value = map[string]int32{
	"ACTION_RESERVED":  0,
	"ACTION_PLAY":      1,
	"ACTION_UNO_PLAY":  2,
	"ACTION_DRAW":      3,
	"ACTION_KEEP":      4,
	"ACTION_CHALLENGE": 5,
	"ACTION_ACCEPT":    6,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{2}
}

type ActionResult int32

const (
	ActionResult_ACTION_RESULT_OK             ActionResult = 0
	ActionResult_ACTION_RESULT_GAME_NOT_START ActionResult = 1
	ActionResult_ACTION_RESULT_NOT_TURN       ActionResult = 2
	ActionResult_ACTION_RESULT_CARD_NOT_EXIST ActionResult = 3
	ActionResult_ACTION_RESULT_NOT_DRAW_CARD  ActionResult = 4
	ActionResult_ACTION_RESULT_NEED_COLOR     ActionResult = 5
	ActionResult_ACTION_RESULT_INVALID        ActionResult = 6
)

var ActionResult_name = map[int32]string{
	0: "ACTION_RESULT_OK",
	1: "ACTION_RESULT_GAME_NOT_START",
	2: "ACTION_RESULT_NOT_TURN",
	3: "ACTION_RESULT_CARD_NOT_EXIST",
	4: "ACTION_RESULT_NOT_DRAW_CARD",
	5: "ACTION_RESULT_NEED_COLOR",
	6: "ACTION_RESULT_INVALID",
}
var ActionResult_value = map[string]int32{
	"ACTION_RESULT_OK":             0,
	"ACTION_RESULT_GAME_NOT_START": 1,
	"ACTION_RESULT_NOT_TURN":       2,
	"ACTION_RESULT_CARD_NOT_EXIST": 3,
	"ACTION_RESULT_NOT_DRAW_CARD":  4,
	"ACTION_RESULT_NEED_COLOR":     5,
	"ACTION_RESULT_INVALID":        6,
}

func (x ActionResult) String() string {
	return proto.EnumName(ActionResult_name, int32(x))
}
func (ActionResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{3}
}

type CardColor int32

const (
	CardColor_COLOR_WILD   CardColor = 0
	CardColor_COLOR_RED    CardColor = 16
	CardColor_COLOR_YELLOW CardColor = 32
	CardColor_COLOR_BLUE   CardColor = 48
	CardColor_COLOR_GREEN  CardColor = 64
)

var CardColor_name = map[int32]string{
	0:  "COLOR_WILD",
	16: "COLOR_RED",
	32: "COLOR_YELLOW",
	48: "COLOR_BLUE",
	64: "COLOR_GREEN",
}
var CardColor_value = map[string]int32{
	"COLOR_WILD":   0,
	"COLOR_RED":    16,
	"COLOR_YELLOW": 32,
	"COLOR_BLUE":   48,
	"COLOR_GREEN":  64,
}

func (x CardColor) String() string {
	return proto.EnumName(CardColor_name, int32(x))
}
func (CardColor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{4}
}

type PlayerStatus int32

const (
	PlayerStatus_STATUS_DEFAULT   PlayerStatus = 0
	PlayerStatus_STATUS_UNO       PlayerStatus = 1
	PlayerStatus_STATUS_DRAW      PlayerStatus = 2
	PlayerStatus_STATUS_CHALLENGE PlayerStatus = 4
)

var PlayerStatus_name = map[int32]string{
	0: "STATUS_DEFAULT",
	1: "STATUS_UNO",
	2: "STATUS_DRAW",
	4: "STATUS_CHALLENGE",
}
var PlayerStatus_value = map[string]int32{
	"STATUS_DEFAULT":   0,
	"STATUS_UNO":       1,
	"STATUS_DRAW":      2,
	"STATUS_CHALLENGE": 4,
}

func (x PlayerStatus) String() string {
	return proto.EnumName(PlayerStatus_name, int32(x))
}
func (PlayerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{5}
}

type TableStatus int32

const (
	TableStatus_STATUS_IDLE      TableStatus = 0
	TableStatus_STATUS_WAIT      TableStatus = 1
	TableStatus_STATUS_PLAYING   TableStatus = 2
	TableStatus_STATUS_GAME_OVER TableStatus = 3
)

var TableStatus_name = map[int32]string{
	0: "STATUS_IDLE",
	1: "STATUS_WAIT",
	2: "STATUS_PLAYING",
	3: "STATUS_GAME_OVER",
}
var TableStatus_value = map[string]int32{
	"STATUS_IDLE":      0,
	"STATUS_WAIT":      1,
	"STATUS_PLAYING":   2,
	"STATUS_GAME_OVER": 3,
}

func (x TableStatus) String() string {
	return proto.EnumName(TableStatus_name, int32(x))
}
func (TableStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{6}
}

type UnoPlayer struct {
	Uid                  uint64   `protobuf:"fixed64,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status               int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Cards                []byte   `protobuf:"bytes,4,opt,name=cards,proto3" json:"cards,omitempty"`
	Score                int32    `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnoPlayer) Reset()         { *m = UnoPlayer{} }
func (m *UnoPlayer) String() string { return proto.CompactTextString(m) }
func (*UnoPlayer) ProtoMessage()    {}
func (*UnoPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{0}
}
func (m *UnoPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnoPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnoPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnoPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnoPlayer.Merge(dst, src)
}
func (m *UnoPlayer) XXX_Size() int {
	return m.Size()
}
func (m *UnoPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_UnoPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_UnoPlayer proto.InternalMessageInfo

func (m *UnoPlayer) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UnoPlayer) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UnoPlayer) GetCards() []byte {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *UnoPlayer) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type TableState struct {
	Tid                  uint64       `protobuf:"fixed64,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Status               TableStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=proto.game.TableStatus" json:"status,omitempty"`
	Timeout              int32        `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	TimeLeft             int32        `protobuf:"varint,4,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`
	Clockwise            bool         `protobuf:"varint,5,opt,name=clockwise,proto3" json:"clockwise,omitempty"`
	Color                int32        `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`
	ChallengeColor       int32        `protobuf:"varint,7,opt,name=challenge_color,json=challengeColor,proto3" json:"challenge_color,omitempty"`
	LastPlayer           uint64       `protobuf:"fixed64,8,opt,name=last_player,json=lastPlayer,proto3" json:"last_player,omitempty"`
	CurrentPlayer        uint64       `protobuf:"fixed64,9,opt,name=current_player,json=currentPlayer,proto3" json:"current_player,omitempty"`
	CardsLeft            int32        `protobuf:"varint,10,opt,name=cards_left,json=cardsLeft,proto3" json:"cards_left,omitempty"`
	DiscardPile          []byte       `protobuf:"bytes,11,opt,name=discard_pile,json=discardPile,proto3" json:"discard_pile,omitempty"`
	Players              []*UnoPlayer `protobuf:"bytes,12,rep,name=players" json:"players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TableState) Reset()         { *m = TableState{} }
func (m *TableState) String() string { return proto.CompactTextString(m) }
func (*TableState) ProtoMessage()    {}
func (*TableState) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{1}
}
func (m *TableState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TableState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableState.Merge(dst, src)
}
func (m *TableState) XXX_Size() int {
	return m.Size()
}
func (m *TableState) XXX_DiscardUnknown() {
	xxx_messageInfo_TableState.DiscardUnknown(m)
}

var xxx_messageInfo_TableState proto.InternalMessageInfo

func (m *TableState) GetTid() uint64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TableState) GetStatus() TableStatus {
	if m != nil {
		return m.Status
	}
	return TableStatus_STATUS_IDLE
}

func (m *TableState) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *TableState) GetTimeLeft() int32 {
	if m != nil {
		return m.TimeLeft
	}
	return 0
}

func (m *TableState) GetClockwise() bool {
	if m != nil {
		return m.Clockwise
	}
	return false
}

func (m *TableState) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *TableState) GetChallengeColor() int32 {
	if m != nil {
		return m.ChallengeColor
	}
	return 0
}

func (m *TableState) GetLastPlayer() uint64 {
	if m != nil {
		return m.LastPlayer
	}
	return 0
}

func (m *TableState) GetCurrentPlayer() uint64 {
	if m != nil {
		return m.CurrentPlayer
	}
	return 0
}

func (m *TableState) GetCardsLeft() int32 {
	if m != nil {
		return m.CardsLeft
	}
	return 0
}

func (m *TableState) GetDiscardPile() []byte {
	if m != nil {
		return m.DiscardPile
	}
	return nil
}

func (m *TableState) GetPlayers() []*UnoPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

type S2CPlayerJoinNty struct {
	Uid                  uint64   `protobuf:"fixed64,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CPlayerJoinNty) Reset()         { *m = S2CPlayerJoinNty{} }
func (m *S2CPlayerJoinNty) String() string { return proto.CompactTextString(m) }
func (*S2CPlayerJoinNty) ProtoMessage()    {}
func (*S2CPlayerJoinNty) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{2}
}
func (m *S2CPlayerJoinNty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CPlayerJoinNty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CPlayerJoinNty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CPlayerJoinNty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CPlayerJoinNty.Merge(dst, src)
}
func (m *S2CPlayerJoinNty) XXX_Size() int {
	return m.Size()
}
func (m *S2CPlayerJoinNty) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CPlayerJoinNty.DiscardUnknown(m)
}

var xxx_messageInfo_S2CPlayerJoinNty proto.InternalMessageInfo

func (m *S2CPlayerJoinNty) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type S2CPlayerLeftNty struct {
	Uid                  uint64   `protobuf:"fixed64,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CPlayerLeftNty) Reset()         { *m = S2CPlayerLeftNty{} }
func (m *S2CPlayerLeftNty) String() string { return proto.CompactTextString(m) }
func (*S2CPlayerLeftNty) ProtoMessage()    {}
func (*S2CPlayerLeftNty) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{3}
}
func (m *S2CPlayerLeftNty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CPlayerLeftNty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CPlayerLeftNty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CPlayerLeftNty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CPlayerLeftNty.Merge(dst, src)
}
func (m *S2CPlayerLeftNty) XXX_Size() int {
	return m.Size()
}
func (m *S2CPlayerLeftNty) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CPlayerLeftNty.DiscardUnknown(m)
}

var xxx_messageInfo_S2CPlayerLeftNty proto.InternalMessageInfo

func (m *S2CPlayerLeftNty) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type C2SActionReq struct {
	Action               int32    `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	Card                 []byte   `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	Color                int32    `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2SActionReq) Reset()         { *m = C2SActionReq{} }
func (m *C2SActionReq) String() string { return proto.CompactTextString(m) }
func (*C2SActionReq) ProtoMessage()    {}
func (*C2SActionReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{4}
}
func (m *C2SActionReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SActionReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SActionReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *C2SActionReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SActionReq.Merge(dst, src)
}
func (m *C2SActionReq) XXX_Size() int {
	return m.Size()
}
func (m *C2SActionReq) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SActionReq.DiscardUnknown(m)
}

var xxx_messageInfo_C2SActionReq proto.InternalMessageInfo

func (m *C2SActionReq) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *C2SActionReq) GetCard() []byte {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *C2SActionReq) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

type S2CActionResp struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Card                 []byte   `protobuf:"bytes,2,opt,name=card,proto3" json:"card,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CActionResp) Reset()         { *m = S2CActionResp{} }
func (m *S2CActionResp) String() string { return proto.CompactTextString(m) }
func (*S2CActionResp) ProtoMessage()    {}
func (*S2CActionResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{5}
}
func (m *S2CActionResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CActionResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CActionResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CActionResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CActionResp.Merge(dst, src)
}
func (m *S2CActionResp) XXX_Size() int {
	return m.Size()
}
func (m *S2CActionResp) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CActionResp.DiscardUnknown(m)
}

var xxx_messageInfo_S2CActionResp proto.InternalMessageInfo

func (m *S2CActionResp) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *S2CActionResp) GetCard() []byte {
	if m != nil {
		return m.Card
	}
	return nil
}

type SingleEvent struct {
	Uid                  uint64   `protobuf:"fixed64,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Event                int32    `protobuf:"varint,2,opt,name=event,proto3" json:"event,omitempty"`
	Card                 []byte   `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`
	Clockwise            bool     `protobuf:"varint,4,opt,name=clockwise,proto3" json:"clockwise,omitempty"`
	Color                int32    `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleEvent) Reset()         { *m = SingleEvent{} }
func (m *SingleEvent) String() string { return proto.CompactTextString(m) }
func (*SingleEvent) ProtoMessage()    {}
func (*SingleEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{6}
}
func (m *SingleEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SingleEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleEvent.Merge(dst, src)
}
func (m *SingleEvent) XXX_Size() int {
	return m.Size()
}
func (m *SingleEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SingleEvent proto.InternalMessageInfo

func (m *SingleEvent) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SingleEvent) GetEvent() int32 {
	if m != nil {
		return m.Event
	}
	return 0
}

func (m *SingleEvent) GetCard() []byte {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *SingleEvent) GetClockwise() bool {
	if m != nil {
		return m.Clockwise
	}
	return false
}

func (m *SingleEvent) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

type S2CEventNty struct {
	Events               []*SingleEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *S2CEventNty) Reset()         { *m = S2CEventNty{} }
func (m *S2CEventNty) String() string { return proto.CompactTextString(m) }
func (*S2CEventNty) ProtoMessage()    {}
func (*S2CEventNty) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{7}
}
func (m *S2CEventNty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CEventNty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CEventNty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CEventNty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CEventNty.Merge(dst, src)
}
func (m *S2CEventNty) XXX_Size() int {
	return m.Size()
}
func (m *S2CEventNty) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CEventNty.DiscardUnknown(m)
}

var xxx_messageInfo_S2CEventNty proto.InternalMessageInfo

func (m *S2CEventNty) GetEvents() []*SingleEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type S2CGameOverNty struct {
	Ranks                []uint64 `protobuf:"fixed64,1,rep,packed,name=ranks" json:"ranks,omitempty"`
	Scores               []int32  `protobuf:"varint,2,rep,packed,name=scores" json:"scores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CGameOverNty) Reset()         { *m = S2CGameOverNty{} }
func (m *S2CGameOverNty) String() string { return proto.CompactTextString(m) }
func (*S2CGameOverNty) ProtoMessage()    {}
func (*S2CGameOverNty) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_134e12165115fa73, []int{8}
}
func (m *S2CGameOverNty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGameOverNty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGameOverNty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CGameOverNty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGameOverNty.Merge(dst, src)
}
func (m *S2CGameOverNty) XXX_Size() int {
	return m.Size()
}
func (m *S2CGameOverNty) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGameOverNty.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGameOverNty proto.InternalMessageInfo

func (m *S2CGameOverNty) GetRanks() []uint64 {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *S2CGameOverNty) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func init() {
	proto.RegisterType((*UnoPlayer)(nil), "proto.game.UnoPlayer")
	proto.RegisterType((*TableState)(nil), "proto.game.TableState")
	proto.RegisterType((*S2CPlayerJoinNty)(nil), "proto.game.S2CPlayerJoinNty")
	proto.RegisterType((*S2CPlayerLeftNty)(nil), "proto.game.S2CPlayerLeftNty")
	proto.RegisterType((*C2SActionReq)(nil), "proto.game.C2SActionReq")
	proto.RegisterType((*S2CActionResp)(nil), "proto.game.S2CActionResp")
	proto.RegisterType((*SingleEvent)(nil), "proto.game.SingleEvent")
	proto.RegisterType((*S2CEventNty)(nil), "proto.game.S2CEventNty")
	proto.RegisterType((*S2CGameOverNty)(nil), "proto.game.S2CGameOverNty")
	proto.RegisterEnum("proto.game.GameCmd", GameCmd_name, GameCmd_value)
	proto.RegisterEnum("proto.game.Event", Event_name, Event_value)
	proto.RegisterEnum("proto.game.Action", Action_name, Action_value)
	proto.RegisterEnum("proto.game.ActionResult", ActionResult_name, ActionResult_value)
	proto.RegisterEnum("proto.game.CardColor", CardColor_name, CardColor_value)
	proto.RegisterEnum("proto.game.PlayerStatus", PlayerStatus_name, PlayerStatus_value)
	proto.RegisterEnum("proto.game.TableStatus", TableStatus_name, TableStatus_value)
}
func (m *UnoPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnoPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uid))
		i += 8
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Status))
	}
	if len(m.Cards) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Cards)))
		i += copy(dAtA[i:], m.Cards)
	}
	if m.Score != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TableState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Tid))
		i += 8
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Status))
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Timeout))
	}
	if m.TimeLeft != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.TimeLeft))
	}
	if m.Clockwise {
		dAtA[i] = 0x28
		i++
		if m.Clockwise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Color != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Color))
	}
	if m.ChallengeColor != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.ChallengeColor))
	}
	if m.LastPlayer != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LastPlayer))
		i += 8
	}
	if m.CurrentPlayer != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.CurrentPlayer))
		i += 8
	}
	if m.CardsLeft != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.CardsLeft))
	}
	if len(m.DiscardPile) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.DiscardPile)))
		i += copy(dAtA[i:], m.DiscardPile)
	}
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x62
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CPlayerJoinNty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPlayerJoinNty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uid))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CPlayerLeftNty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPlayerLeftNty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uid))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *C2SActionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SActionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Action))
	}
	if len(m.Card) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Card)))
		i += copy(dAtA[i:], m.Card)
	}
	if m.Color != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Color))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CActionResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CActionResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result))
	}
	if len(m.Card) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Card)))
		i += copy(dAtA[i:], m.Card)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SingleEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uid))
		i += 8
	}
	if m.Event != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Event))
	}
	if len(m.Card) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Card)))
		i += copy(dAtA[i:], m.Card)
	}
	if m.Clockwise {
		dAtA[i] = 0x20
		i++
		if m.Clockwise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Color != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Color))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CEventNty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CEventNty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CGameOverNty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGameOverNty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Ranks)*8))
		for _, num := range m.Ranks {
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	if len(m.Scores) > 0 {
		dAtA2 := make([]byte, len(m.Scores)*10)
		var j1 int
		for _, num1 := range m.Scores {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UnoPlayer) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovGame(uint64(m.Status))
	}
	l = len(m.Cards)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovGame(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableState) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovGame(uint64(m.Status))
	}
	if m.Timeout != 0 {
		n += 1 + sovGame(uint64(m.Timeout))
	}
	if m.TimeLeft != 0 {
		n += 1 + sovGame(uint64(m.TimeLeft))
	}
	if m.Clockwise {
		n += 2
	}
	if m.Color != 0 {
		n += 1 + sovGame(uint64(m.Color))
	}
	if m.ChallengeColor != 0 {
		n += 1 + sovGame(uint64(m.ChallengeColor))
	}
	if m.LastPlayer != 0 {
		n += 9
	}
	if m.CurrentPlayer != 0 {
		n += 9
	}
	if m.CardsLeft != 0 {
		n += 1 + sovGame(uint64(m.CardsLeft))
	}
	l = len(m.DiscardPile)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CPlayerJoinNty) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CPlayerLeftNty) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2SActionReq) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovGame(uint64(m.Action))
	}
	l = len(m.Card)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Color != 0 {
		n += 1 + sovGame(uint64(m.Color))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CActionResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovGame(uint64(m.Result))
	}
	l = len(m.Card)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SingleEvent) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 9
	}
	if m.Event != 0 {
		n += 1 + sovGame(uint64(m.Event))
	}
	l = len(m.Card)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Clockwise {
		n += 2
	}
	if m.Color != 0 {
		n += 1 + sovGame(uint64(m.Color))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CEventNty) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CGameOverNty) Size() (n int) {
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		n += 1 + sovGame(uint64(len(m.Ranks)*8)) + len(m.Ranks)*8
	}
	if len(m.Scores) > 0 {
		l = 0
		for _, e := range m.Scores {
			l += sovGame(uint64(e))
		}
		n += 1 + sovGame(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnoPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnoPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnoPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards[:0], dAtA[iNdEx:postIndex]...)
			if m.Cards == nil {
				m.Cards = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Tid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (TableStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLeft", wireType)
			}
			m.TimeLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeLeft |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clockwise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clockwise = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeColor", wireType)
			}
			m.ChallengeColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeColor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPlayer", wireType)
			}
			m.LastPlayer = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPlayer = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPlayer", wireType)
			}
			m.CurrentPlayer = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPlayer = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsLeft", wireType)
			}
			m.CardsLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardsLeft |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscardPile", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscardPile = append(m.DiscardPile[:0], dAtA[iNdEx:postIndex]...)
			if m.DiscardPile == nil {
				m.DiscardPile = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &UnoPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPlayerJoinNty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPlayerJoinNty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPlayerJoinNty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPlayerLeftNty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPlayerLeftNty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPlayerLeftNty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SActionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SActionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SActionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = append(m.Card[:0], dAtA[iNdEx:postIndex]...)
			if m.Card == nil {
				m.Card = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CActionResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CActionResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CActionResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = append(m.Card[:0], dAtA[iNdEx:postIndex]...)
			if m.Card == nil {
				m.Card = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = append(m.Card[:0], dAtA[iNdEx:postIndex]...)
			if m.Card == nil {
				m.Card = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clockwise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clockwise = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CEventNty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CEventNty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CEventNty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &SingleEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGameOverNty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGameOverNty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGameOverNty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.Ranks = append(m.Ranks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if len(m.Ranks) == 0 {
					m.Ranks = make([]uint64, 0, packedLen/8)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.Ranks = append(m.Ranks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game.proto", fileDescriptor_game_134e12165115fa73) }

var fileDescriptor_game_134e12165115fa73 = []byte{
	// 1092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0x37, 0x71, 0x76, 0x73, 0x92, 0xcd, 0x0e, 0xd3, 0x6d, 0x1b, 0x68, 0xd9, 0x86, 0x08,
	0xc4, 0x2a, 0x12, 0x09, 0x0a, 0x97, 0x48, 0x55, 0x5c, 0x67, 0x76, 0xeb, 0xae, 0x6b, 0x87, 0xb1,
	0xb3, 0x4b, 0x90, 0x90, 0xe5, 0x4d, 0xdc, 0xd4, 0xaa, 0x13, 0x07, 0xdb, 0x29, 0xea, 0x05, 0x17,
	0xfc, 0x08, 0x21, 0x84, 0xfa, 0x08, 0x3c, 0x0f, 0x77, 0xf0, 0x04, 0x08, 0xed, 0x0b, 0xf0, 0x0a,
	0x68, 0x66, 0x1c, 0xdb, 0xe9, 0x2e, 0x57, 0xf1, 0xf7, 0xcd, 0x77, 0xfe, 0xcf, 0x4c, 0x00, 0xe6,
	0xee, 0xc2, 0xeb, 0xae, 0xa2, 0x30, 0x09, 0x31, 0xf0, 0x9f, 0x2e, 0x63, 0xda, 0x2e, 0x54, 0xc7,
	0xcb, 0x70, 0x14, 0xb8, 0xaf, 0xbd, 0x08, 0x23, 0x28, 0xad, 0xfd, 0x59, 0x53, 0x6a, 0x49, 0xc7,
	0x15, 0xca, 0x3e, 0xf1, 0x5d, 0xa8, 0xc4, 0x89, 0x9b, 0xac, 0xe3, 0x66, 0xa9, 0x25, 0x1d, 0xcb,
	0x34, 0x45, 0xf8, 0x10, 0xe4, 0xa9, 0x1b, 0xcd, 0xe2, 0x66, 0xb9, 0x25, 0x1d, 0xd7, 0xa9, 0x00,
	0x8c, 0x8d, 0xa7, 0x61, 0xe4, 0x35, 0x65, 0x2e, 0x16, 0xa0, 0xfd, 0x7b, 0x09, 0xc0, 0x76, 0x2f,
	0x03, 0xcf, 0x4a, 0xdc, 0xc4, 0x63, 0x41, 0x92, 0x3c, 0x48, 0xe2, 0xcf, 0x70, 0x2f, 0x0b, 0xb2,
	0xd3, 0x92, 0x8e, 0x1b, 0xfd, 0x7b, 0xdd, 0x3c, 0xc1, 0x6e, 0x66, 0xb9, 0x8e, 0xb3, 0xe8, 0x4d,
	0xd8, 0x4d, 0xfc, 0x85, 0x17, 0xae, 0x93, 0x34, 0xad, 0x0d, 0xc4, 0xf7, 0xa1, 0xca, 0x3e, 0x9d,
	0xc0, 0x7b, 0x9e, 0xf0, 0xdc, 0x64, 0xba, 0xc7, 0x08, 0xdd, 0x7b, 0x9e, 0xe0, 0x07, 0x50, 0x9d,
	0x06, 0xe1, 0xf4, 0xe5, 0xb7, 0x7e, 0x2c, 0x52, 0xdc, 0xa3, 0x39, 0xc1, 0x4b, 0x0a, 0x83, 0x30,
	0x6a, 0x56, 0x44, 0xf2, 0x1c, 0xe0, 0x8f, 0xe1, 0x60, 0xfa, 0xc2, 0x0d, 0x02, 0x6f, 0x39, 0xf7,
	0x1c, 0x71, 0xbe, 0xcb, 0xcf, 0x1b, 0x19, 0xad, 0x72, 0xe1, 0x43, 0xa8, 0x05, 0x6e, 0x9c, 0x38,
	0x2b, 0xde, 0xca, 0xe6, 0x1e, 0x2f, 0x0f, 0x18, 0x95, 0x36, 0xf7, 0x23, 0x68, 0x4c, 0xd7, 0x51,
	0xe4, 0x2d, 0x33, 0x4d, 0x95, 0x6b, 0xf6, 0x53, 0x36, 0x95, 0xbd, 0x0f, 0xc0, 0x9b, 0x29, 0x4a,
	0x00, 0x1e, 0xab, 0xca, 0x19, 0x5e, 0xc3, 0x07, 0x50, 0x9f, 0xf9, 0x31, 0xc3, 0xce, 0xca, 0x0f,
	0xbc, 0x66, 0x8d, 0xf7, 0xbf, 0x96, 0x72, 0x23, 0x3f, 0xf0, 0x70, 0x0f, 0x76, 0x45, 0x80, 0xb8,
	0x59, 0x6f, 0x95, 0x8e, 0x6b, 0xfd, 0x3b, 0xc5, 0x7e, 0x66, 0xd3, 0xa6, 0x1b, 0x55, 0xfb, 0x43,
	0x40, 0x56, 0x5f, 0x15, 0xec, 0xd3, 0xd0, 0x5f, 0x1a, 0xc9, 0xeb, 0xeb, 0xab, 0xb0, 0xa5, 0x62,
	0xa9, 0xdc, 0xac, 0x1a, 0x41, 0x5d, 0xed, 0x5b, 0xca, 0x34, 0xf1, 0xc3, 0x25, 0xf5, 0xbe, 0x61,
	0x0b, 0xe4, 0x72, 0xc0, 0x45, 0x32, 0x4d, 0x11, 0xc6, 0x50, 0x66, 0x09, 0xf3, 0x89, 0xd7, 0x29,
	0xff, 0xce, 0x27, 0x50, 0x2a, 0x4c, 0xa0, 0xfd, 0x39, 0xec, 0x5b, 0x7d, 0x75, 0xe3, 0x31, 0x5e,
	0x31, 0x97, 0x91, 0x17, 0xaf, 0x83, 0x64, 0xe3, 0x52, 0xa0, 0x9b, 0x5c, 0xb6, 0xbf, 0x83, 0x9a,
	0xe5, 0x2f, 0xe7, 0x81, 0x47, 0x5e, 0x79, 0xcb, 0xe4, 0x86, 0x05, 0x3f, 0x04, 0xd9, 0x63, 0x47,
	0xdc, 0x4a, 0xa6, 0x02, 0x64, 0xae, 0x4a, 0x85, 0xec, 0xb6, 0xb6, 0xa7, 0xfc, 0xbf, 0xdb, 0x23,
	0x17, 0x73, 0x7f, 0x04, 0x35, 0xab, 0xaf, 0xf2, 0xd8, 0xac, 0x5d, 0x3d, 0xa8, 0x70, 0xff, 0x71,
	0x53, 0xe2, 0x83, 0xd9, 0x5a, 0xf4, 0x42, 0x9e, 0x34, 0x95, 0xb5, 0x1f, 0x41, 0xc3, 0xea, 0xab,
	0xa7, 0xee, 0xc2, 0x33, 0x5f, 0x79, 0x11, 0x73, 0x71, 0x08, 0x72, 0xe4, 0x2e, 0x5f, 0x0a, 0x0f,
	0x15, 0x2a, 0x00, 0xbf, 0xa6, 0xec, 0xae, 0xb1, 0x1b, 0x54, 0xe2, 0xd7, 0x94, 0xa3, 0xce, 0x9f,
	0x12, 0xec, 0x32, 0x6b, 0x75, 0x31, 0xc3, 0xef, 0xc0, 0xfe, 0xa9, 0xf2, 0x8c, 0x38, 0x94, 0x58,
	0x84, 0x9e, 0x93, 0x21, 0xba, 0x85, 0x6f, 0x43, 0x83, 0x18, 0x36, 0xa1, 0x4e, 0x7a, 0xf0, 0x05,
	0xfa, 0x7e, 0x80, 0x0f, 0xe1, 0x60, 0x8b, 0xb4, 0x46, 0xe8, 0x87, 0x01, 0x3e, 0x00, 0x50, 0x54,
	0x5b, 0x33, 0x0d, 0x2e, 0xfb, 0x71, 0x80, 0x11, 0xd4, 0x32, 0xc2, 0x1a, 0xa1, 0x9f, 0x06, 0xb8,
	0x01, 0x55, 0x72, 0x4e, 0x0c, 0xdb, 0x31, 0xec, 0x09, 0xfa, 0x99, 0x3b, 0x1a, 0xe9, 0xca, 0x84,
	0x50, 0xe7, 0xa9, 0xa9, 0x19, 0x9c, 0xfd, 0xa5, 0xc8, 0xea, 0xe4, 0x44, 0x68, 0x7f, 0x1d, 0xb0,
	0x4c, 0x78, 0x38, 0xcb, 0x56, 0xa8, 0x20, 0x7f, 0x1b, 0x60, 0x9c, 0x66, 0x6c, 0x9e, 0x13, 0xca,
	0xb9, 0x37, 0x83, 0xce, 0xbf, 0x12, 0xc8, 0x24, 0x9d, 0x51, 0x43, 0x84, 0x2b, 0x14, 0xd4, 0x00,
	0x10, 0x9c, 0x3d, 0xa6, 0x06, 0x92, 0x72, 0xcc, 0x42, 0xa2, 0x9d, 0xdc, 0x66, 0x6c, 0x98, 0x82,
	0x2b, 0xe5, 0x9a, 0x21, 0x55, 0x2e, 0x50, 0x39, 0xc7, 0x67, 0x84, 0x8c, 0x90, 0x9c, 0x63, 0xeb,
	0x4c, 0x1b, 0xa1, 0x0a, 0xbe, 0x0d, 0x07, 0x02, 0xab, 0x4f, 0x14, 0x5d, 0x27, 0xc6, 0x29, 0x41,
	0xbb, 0xf8, 0x3e, 0xdc, 0x7b, 0x8b, 0x74, 0x46, 0xc4, 0x50, 0x74, 0x7b, 0x82, 0xf6, 0x58, 0xe7,
	0xd3, 0xac, 0xb4, 0x67, 0xc4, 0x1c, 0xdb, 0xa8, 0x8a, 0xef, 0x02, 0x4e, 0x83, 0x12, 0xf5, 0xcc,
	0xb1, 0x9e, 0x8c, 0x4f, 0x4e, 0x74, 0x82, 0x20, 0x97, 0x52, 0x72, 0x4e, 0xa8, 0x45, 0x50, 0xad,
	0xf3, 0x46, 0x82, 0x8a, 0xd8, 0x7e, 0x16, 0x3a, 0xef, 0xf9, 0xa6, 0xe6, 0x83, 0x6c, 0x10, 0xbc,
	0x20, 0xa9, 0xa0, 0xca, 0xaa, 0xdc, 0x29, 0xa8, 0x78, 0x99, 0xa5, 0x02, 0xc1, 0xeb, 0x2c, 0xe3,
	0x43, 0x40, 0x29, 0x91, 0x17, 0x26, 0xb3, 0x84, 0x52, 0x56, 0x51, 0x55, 0x32, 0xb2, 0x51, 0xa5,
	0xf3, 0xb7, 0x04, 0xf5, 0xec, 0x3a, 0xb2, 0x8b, 0x97, 0x5b, 0x52, 0x62, 0x8d, 0x75, 0xdb, 0x31,
	0xcf, 0xd0, 0x2d, 0xdc, 0x82, 0x07, 0xdb, 0x2c, 0x9f, 0xa5, 0x61, 0xda, 0x62, 0xc8, 0x48, 0xc2,
	0xef, 0xc1, 0xdd, 0x6d, 0x05, 0x3b, 0xe4, 0x93, 0xdb, 0xb9, 0x6e, 0xad, 0x2a, 0x74, 0xc8, 0x05,
	0xe4, 0x4b, 0xcd, 0xb2, 0x51, 0x09, 0x3f, 0x84, 0xfb, 0xd7, 0xad, 0x59, 0x71, 0x5c, 0x8a, 0xca,
	0xf8, 0x01, 0x34, 0xdf, 0x12, 0x10, 0x32, 0x74, 0x54, 0x53, 0x37, 0x29, 0x92, 0xf1, 0xbb, 0x70,
	0x67, 0xfb, 0x54, 0x33, 0xce, 0x15, 0x5d, 0x1b, 0xa2, 0x4a, 0xe7, 0x6b, 0xa8, 0xaa, 0x6e, 0x34,
	0x13, 0xef, 0x7a, 0x03, 0x80, 0x9b, 0x38, 0x17, 0x9a, 0xce, 0xda, 0xbd, 0x0f, 0x55, 0x81, 0x29,
	0x19, 0x22, 0x84, 0x11, 0xd4, 0x05, 0x9c, 0x10, 0x5d, 0x37, 0x2f, 0x50, 0x2b, 0x37, 0x78, 0xac,
	0x8f, 0x09, 0xfa, 0x94, 0x35, 0x5a, 0xe0, 0x53, 0x4a, 0x88, 0x81, 0x06, 0x9d, 0x09, 0xd4, 0xc5,
	0x2b, 0x2a, 0xfe, 0xd5, 0xd8, 0x52, 0x5a, 0xb6, 0x62, 0x8f, 0x2d, 0x67, 0x48, 0x4e, 0x94, 0xb1,
	0x6e, 0x8b, 0x45, 0x4e, 0xb9, 0xb1, 0x61, 0x22, 0x89, 0x39, 0xd9, 0x68, 0xd8, 0xf8, 0x76, 0x58,
	0xcf, 0x53, 0x22, 0x9f, 0x56, 0xb9, 0x33, 0x81, 0x5a, 0xe1, 0xff, 0xb2, 0x60, 0xa5, 0x0d, 0x75,
	0x22, 0x76, 0x25, 0x25, 0x2e, 0x14, 0x8d, 0x8d, 0x20, 0x8f, 0xcd, 0xf6, 0x44, 0x33, 0x4e, 0xb7,
	0x5c, 0x67, 0xb7, 0x0f, 0x95, 0x1e, 0x77, 0xff, 0xb8, 0x3a, 0x92, 0xfe, 0xba, 0x3a, 0x92, 0xfe,
	0xb9, 0x3a, 0x92, 0xbe, 0x6a, 0xcd, 0xfd, 0xe4, 0xc5, 0xfa, 0xb2, 0x3b, 0x0d, 0x17, 0xbd, 0x85,
	0x1b, 0x27, 0x5e, 0xf4, 0xc9, 0xbc, 0x37, 0x0f, 0xd7, 0xcb, 0xb0, 0xe7, 0xae, 0xfc, 0xde, 0xea,
	0xf2, 0xb2, 0xc2, 0x9f, 0xb6, 0xcf, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xee, 0xc3, 0xd0,
	0x79, 0x08, 0x00, 0x00,
}

syntax = "proto3";
package proto.common;
option go_package = "github.com/master-g/gouno/proto/pb";

// Command Codes
// S -> C : even
// C -> S : odd
enum GameCmd {
    GAME_RESERVED = 0;      //
    SYNC_TABLE    = 0x2001; // C->S request to synchronize the table
    ACTION        = 0x2003; // C->S player take action
    EVENT_NTY     = 0x2004; // S->C event broadcast
    GAME_OVER     = 0x2006; // S->C game over
}

enum Event {
    EVENT_PLAY              = 0; // player play card
    EVENT_UNO_PLAY          = 1; // player play card and say uno
    EVENT_DRAW              = 2; // player draw cards from deck
    EVENT_SKIP              = 3; // player skip
    EVENT_CHALLENGE         = 4; // player challenge last player's wild+4 card
    EVENT_CHALLENGE_PENALTY = 5; // player challenge success or failed
    EVENT_TIMEOUT           = 6; // player timeout
    EVENT_DECK_SHUFFLE      = 7; // deck ran out, re-shuffle
}

enum CardColor {
    COLOR_BLACK  = 0; // black for wild cards
    COLOR_RED    = 1; // red
    COLOR_YELLOW = 2; // yellow
    COLOR_BLUE   = 4; // blue
    COLOR_GREEN  = 8; // green
}

message TableConfig {
    int32 turn_timeout       = 1; // turn timeout, in seconds
    int32 game_over_duration = 2; // game over interval before start next game
}

message UnoPlayer {
    fixed64  uid          = 1; // user id
    int32    timeout      = 2; // timeout, in seconds
    bool     uno          = 3; // uno flag
    repeated uint32 cards = 4; // uno cards
}

message S2CTableState {
    fixed64     tid             = 1;  // table id
    bool        playing         = 2;  // is game running
    bool        clockwise       = 3;  // current direction
    fixed64     dealer_uid      = 4;  // dealer uid
    fixed64     last_player     = 5;  // last player
    fixed64     current_player  = 6;  // current player
    int32       cards_left      = 7;  // cards left in deck, can be calculated
    TableConfig table_config    = 8;  // table config
    repeated int32 cards_played = 9;  // cards played
    repeated UnoPlayer players  = 10; // player list
}

message C2SAction {
    int32 event      = 1; // event as action
    int32 card       = 2; // card played
    int32 wild_color = 3; // player play wild and select next play color
}

message S2CEventNty {
    fixed64  uid        = 1; // player uid
    int32    event      = 2; // action
    int32    wild_color = 3; // player play wild and select next play color
    repeated int32 card = 4; // cards involved
}

message S2CGameOverNty {
    repeated fixed64 ranks = 1; // list of uid
    repeated int32 scores  = 2; // list of scores
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package pb // import "github.com/master-g/gouno/proto/pb"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Command Codes
// S -> C : even
// C -> S : odd
type Cmd int32

const (
	Cmd_RESERVED Cmd = 0
	// Common Commands, handle by agent
	Cmd_HEART_BEAT_REQ Cmd = 4097
	Cmd_HEART_BEAT_RSP Cmd = 4098
	Cmd_KICK_NOTIFY    Cmd = 4100
	Cmd_HANDSHAKE_REQ  Cmd = 4113
	Cmd_HANDSHAKE_RSP  Cmd = 4114
	Cmd_LOGOUT_REQ     Cmd = 4131
	Cmd_LOGOUT_RSP     Cmd = 4132
	Cmd_OFFLINE_REQ    Cmd = 4231
	Cmd_PING_REQ       Cmd = 4241
	Cmd_PING_RSP       Cmd = 4242
	Cmd_CMD_COMMON_END Cmd = 8192
)

var Cmd_name = map[int32]string{
	0:    "RESERVED",
	4097: "HEART_BEAT_REQ",
	4098: "HEART_BEAT_RSP",
	4100: "KICK_NOTIFY",
	4113: "HANDSHAKE_REQ",
	4114: "HANDSHAKE_RSP",
	4131: "LOGOUT_REQ",
	4132: "LOGOUT_RSP",
	4231: "OFFLINE_REQ",
	4241: "PING_REQ",
	4242: "PING_RSP",
	8192: "CMD_COMMON_END",
}
var Cmd_value = map[string]int32{
	"RESERVED":       0,
	"HEART_BEAT_REQ": 4097,
	"HEART_BEAT_RSP": 4098,
	"KICK_NOTIFY":    4100,
	"HANDSHAKE_REQ":  4113,
	"HANDSHAKE_RSP":  4114,
	"LOGOUT_REQ":     4131,
	"LOGOUT_RSP":     4132,
	"OFFLINE_REQ":    4231,
	"PING_REQ":       4241,
	"PING_RSP":       4242,
	"CMD_COMMON_END": 8192,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{0}
}

// Status Code similar to http status code
type StatusCode int32

const (
	StatusCode_STATUS_OK             StatusCode = 0
	StatusCode_STATUS_INVALID        StatusCode = 4000
	StatusCode_STATUS_UNAUTH         StatusCode = 4001
	StatusCode_STATUS_UNKNOWN_CMD    StatusCode = 4004
	StatusCode_STATUS_TIMEOUT        StatusCode = 4008
	StatusCode_STATUS_TOO_MANY_REQ   StatusCode = 4029
	StatusCode_STATUS_INTERNAL_ERROR StatusCode = 5000
	StatusCode_STATUS_UNAVAILABLE    StatusCode = 5003
)

var StatusCode_name = map[int32]string{
	0:    "STATUS_OK",
	4000: "STATUS_INVALID",
	4001: "STATUS_UNAUTH",
	4004: "STATUS_UNKNOWN_CMD",
	4008: "STATUS_TIMEOUT",
	4029: "STATUS_TOO_MANY_REQ",
	5000: "STATUS_INTERNAL_ERROR",
	5003: "STATUS_UNAVAILABLE",
}
var StatusCode_value = map[string]int32{
	"STATUS_OK":             0,
	"STATUS_INVALID":        4000,
	"STATUS_UNAUTH":         4001,
	"STATUS_UNKNOWN_CMD":    4004,
	"STATUS_TIMEOUT":        4008,
	"STATUS_TOO_MANY_REQ":   4029,
	"STATUS_INTERNAL_ERROR": 5000,
	"STATUS_UNAVAILABLE":    5003,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{1}
}

type Gender int32

const (
	Gender_GENDER_UNKNOWN Gender = 0
	Gender_GENDER_FEMALE  Gender = 1
	Gender_GENDER_MALE    Gender = 2
)

var Gender_name = map[int32]string{
	0: "GENDER_UNKNOWN",
	1: "GENDER_FEMALE",
	2: "GENDER_MALE",
}
var Gender_value = map[string]int32{
	"GENDER_UNKNOWN": 0,
	"GENDER_FEMALE":  1,
	"GENDER_MALE":    2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{2}
}

type AccountStatus int32

const (
	AccountStatus_ACCOUNT_STATUS_NORMAL     AccountStatus = 0
	AccountStatus_ACCOUNT_STATUS_RESTRICTED AccountStatus = 1
	AccountStatus_ACCOUNT_STATUS_BANNED     AccountStatus = 2
	AccountStatus_ACCOUNT_STATUS_DELETED    AccountStatus = 4
	AccountStatus_ACCOUNT_STATUS_BOT        AccountStatus = 8
	AccountStatus_ACCOUNT_STATUS_OFFICIAL   AccountStatus = 16
)

var AccountStatus_name = map[int32]string{
	0:  "ACCOUNT_STATUS_NORMAL",
	1:  "ACCOUNT_STATUS_RESTRICTED",
	2:  "ACCOUNT_STATUS_BANNED",
	4:  "ACCOUNT_STATUS_DELETED",
	8:  "ACCOUNT_STATUS_BOT",
	16: "ACCOUNT_STATUS_OFFICIAL",
}
var AccountStatus_value = map[string]int32{
	"ACCOUNT_STATUS_NORMAL":     0,
	"ACCOUNT_STATUS_RESTRICTED": 1,
	"ACCOUNT_STATUS_BANNED":     2,
	"ACCOUNT_STATUS_DELETED":    4,
	"ACCOUNT_STATUS_BOT":        8,
	"ACCOUNT_STATUS_OFFICIAL":   16,
}

func (x AccountStatus) String() string {
	return proto.EnumName(AccountStatus_name, int32(x))
}
func (AccountStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{3}
}

type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNKNOWN DeviceType = 0
	DeviceType_DEVICE_TYPE_BROWSER DeviceType = 1
	DeviceType_DEVICE_TYPE_IOS     DeviceType = 2
	DeviceType_DEVICE_TYPE_ANDROID DeviceType = 3
)

var DeviceType_name = map[int32]string{
	0: "DEVICE_TYPE_UNKNOWN",
	1: "DEVICE_TYPE_BROWSER",
	2: "DEVICE_TYPE_IOS",
	3: "DEVICE_TYPE_ANDROID",
}
var DeviceType_value = map[string]int32{
	"DEVICE_TYPE_UNKNOWN": 0,
	"DEVICE_TYPE_BROWSER": 1,
	"DEVICE_TYPE_IOS":     2,
	"DEVICE_TYPE_ANDROID": 3,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{4}
}

type KickReason int32

const (
	KickReason_KICK_NO_REASON         KickReason = 0
	KickReason_KICK_LOGIN_ELSEWHERE   KickReason = 1
	KickReason_KICK_SESSION_EXPIRED   KickReason = 2
	KickReason_KICK_ILLEGAL_OPERATION KickReason = 3
	KickReason_KICK_BANNED            KickReason = 4
)

var KickReason_name = map[int32]string{
	0: "KICK_NO_REASON",
	1: "KICK_LOGIN_ELSEWHERE",
	2: "KICK_SESSION_EXPIRED",
	3: "KICK_ILLEGAL_OPERATION",
	4: "KICK_BANNED",
}
var KickReason_value = map[string]int32{
	"KICK_NO_REASON":         0,
	"KICK_LOGIN_ELSEWHERE":   1,
	"KICK_SESSION_EXPIRED":   2,
	"KICK_ILLEGAL_OPERATION": 3,
	"KICK_BANNED":            4,
}

func (x KickReason) String() string {
	return proto.EnumName(KickReason_name, int32(x))
}
func (KickReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{5}
}

// Client request header
type C2SHeader struct {
	Version              int32       `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Cmd                  int32       `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Seq                  uint64      `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	Uid                  uint64      `protobuf:"fixed64,4,opt,name=uid,proto3" json:"uid,omitempty"`
	ClientInfo           *ClientInfo `protobuf:"bytes,5,opt,name=client_info,json=clientInfo" json:"client_info,omitempty"`
	Body                 []byte      `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *C2SHeader) Reset()         { *m = C2SHeader{} }
func (m *C2SHeader) String() string { return proto.CompactTextString(m) }
func (*C2SHeader) ProtoMessage()    {}
func (*C2SHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{0}
}
func (m *C2SHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *C2SHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SHeader.Merge(dst, src)
}
func (m *C2SHeader) XXX_Size() int {
	return m.Size()
}
func (m *C2SHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SHeader.DiscardUnknown(m)
}

var xxx_messageInfo_C2SHeader proto.InternalMessageInfo

func (m *C2SHeader) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *C2SHeader) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *C2SHeader) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *C2SHeader) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *C2SHeader) GetClientInfo() *ClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *C2SHeader) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// Server response header
type S2CHeader struct {
	Cmd                  int32    `protobuf:"varint,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Seq                  uint64   `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Status               int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            uint64   `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Msg                  string   `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Body                 []byte   `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CHeader) Reset()         { *m = S2CHeader{} }
func (m *S2CHeader) String() string { return proto.CompactTextString(m) }
func (*S2CHeader) ProtoMessage()    {}
func (*S2CHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{1}
}
func (m *S2CHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CHeader.Merge(dst, src)
}
func (m *S2CHeader) XXX_Size() int {
	return m.Size()
}
func (m *S2CHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CHeader.DiscardUnknown(m)
}

var xxx_messageInfo_S2CHeader proto.InternalMessageInfo

func (m *S2CHeader) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *S2CHeader) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *S2CHeader) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *S2CHeader) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *S2CHeader) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *S2CHeader) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// Account message
type Account struct {
	Uid                  uint64      `protobuf:"fixed64,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status               uint64      `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Basic                *UserBasic  `protobuf:"bytes,3,opt,name=basic" json:"basic,omitempty"`
	ClientInfo           *ClientInfo `protobuf:"bytes,4,opt,name=client_info,json=clientInfo" json:"client_info,omitempty"`
	SecureInfo           *SecureInfo `protobuf:"bytes,5,opt,name=secure_info,json=secureInfo" json:"secure_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{2}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Account) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Account) GetBasic() *UserBasic {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *Account) GetClientInfo() *ClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func (m *Account) GetSecureInfo() *SecureInfo {
	if m != nil {
		return m.SecureInfo
	}
	return nil
}

// Basic info
type UserBasic struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Nickname             string   `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar               string   `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Birthday             uint64   `protobuf:"fixed64,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Country              string   `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Gender               Gender   `protobuf:"varint,7,opt,name=gender,proto3,enum=proto.common.Gender" json:"gender,omitempty"`
	LastLogin            uint64   `protobuf:"fixed64,8,opt,name=last_login,json=lastLogin,proto3" json:"last_login,omitempty"`
	LoginCount           int32    `protobuf:"varint,9,opt,name=login_count,json=loginCount,proto3" json:"login_count,omitempty"`
	Since                uint64   `protobuf:"fixed64,10,opt,name=since,proto3" json:"since,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserBasic) Reset()         { *m = UserBasic{} }
func (m *UserBasic) String() string { return proto.CompactTextString(m) }
func (*UserBasic) ProtoMessage()    {}
func (*UserBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{3}
}
func (m *UserBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBasic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBasic.Merge(dst, src)
}
func (m *UserBasic) XXX_Size() int {
	return m.Size()
}
func (m *UserBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBasic.DiscardUnknown(m)
}

var xxx_messageInfo_UserBasic proto.InternalMessageInfo

func (m *UserBasic) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserBasic) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserBasic) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *UserBasic) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserBasic) GetBirthday() uint64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *UserBasic) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UserBasic) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_GENDER_UNKNOWN
}

func (m *UserBasic) GetLastLogin() uint64 {
	if m != nil {
		return m.LastLogin
	}
	return 0
}

func (m *UserBasic) GetLoginCount() int32 {
	if m != nil {
		return m.LoginCount
	}
	return 0
}

func (m *UserBasic) GetSince() uint64 {
	if m != nil {
		return m.Since
	}
	return 0
}

// Client info
type ClientInfo struct {
	DeviceType           int32    `protobuf:"varint,1,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Timestamp            uint64   `protobuf:"fixed64,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Os                   string   `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	OsLocale             string   `protobuf:"bytes,4,opt,name=os_locale,json=osLocale,proto3" json:"os_locale,omitempty"`
	AppVersion           string   `protobuf:"bytes,5,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	AppLocale            string   `protobuf:"bytes,6,opt,name=app_locale,json=appLocale,proto3" json:"app_locale,omitempty"`
	Timezone             string   `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Mcc                  int32    `protobuf:"varint,8,opt,name=mcc,proto3" json:"mcc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{4}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(dst, src)
}
func (m *ClientInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetDeviceType() int32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *ClientInfo) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ClientInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *ClientInfo) GetOsLocale() string {
	if m != nil {
		return m.OsLocale
	}
	return ""
}

func (m *ClientInfo) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *ClientInfo) GetAppLocale() string {
	if m != nil {
		return m.AppLocale
	}
	return ""
}

func (m *ClientInfo) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *ClientInfo) GetMcc() int32 {
	if m != nil {
		return m.Mcc
	}
	return 0
}

type SecureInfo struct {
	LoginIp              string   `protobuf:"bytes,1,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"`
	EmailVerified        bool     `protobuf:"varint,2,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	PhoneVerified        bool     `protobuf:"varint,4,opt,name=phone_verified,json=phoneVerified,proto3" json:"phone_verified,omitempty"`
	Secret               string   `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	Token                string   `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecureInfo) Reset()         { *m = SecureInfo{} }
func (m *SecureInfo) String() string { return proto.CompactTextString(m) }
func (*SecureInfo) ProtoMessage()    {}
func (*SecureInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{5}
}
func (m *SecureInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecureInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecureInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SecureInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecureInfo.Merge(dst, src)
}
func (m *SecureInfo) XXX_Size() int {
	return m.Size()
}
func (m *SecureInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SecureInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SecureInfo proto.InternalMessageInfo

func (m *SecureInfo) GetLoginIp() string {
	if m != nil {
		return m.LoginIp
	}
	return ""
}

func (m *SecureInfo) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *SecureInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *SecureInfo) GetPhoneVerified() bool {
	if m != nil {
		return m.PhoneVerified
	}
	return false
}

func (m *SecureInfo) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *SecureInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Handshake request
// C->S
type C2SHandshakeReq struct {
	SendSeed             []byte   `protobuf:"bytes,1,opt,name=send_seed,json=sendSeed,proto3" json:"send_seed,omitempty"`
	RecvSeed             []byte   `protobuf:"bytes,2,opt,name=recv_seed,json=recvSeed,proto3" json:"recv_seed,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2SHandshakeReq) Reset()         { *m = C2SHandshakeReq{} }
func (m *C2SHandshakeReq) String() string { return proto.CompactTextString(m) }
func (*C2SHandshakeReq) ProtoMessage()    {}
func (*C2SHandshakeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{6}
}
func (m *C2SHandshakeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SHandshakeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SHandshakeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *C2SHandshakeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SHandshakeReq.Merge(dst, src)
}
func (m *C2SHandshakeReq) XXX_Size() int {
	return m.Size()
}
func (m *C2SHandshakeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SHandshakeReq.DiscardUnknown(m)
}

var xxx_messageInfo_C2SHandshakeReq proto.InternalMessageInfo

func (m *C2SHandshakeReq) GetSendSeed() []byte {
	if m != nil {
		return m.SendSeed
	}
	return nil
}

func (m *C2SHandshakeReq) GetRecvSeed() []byte {
	if m != nil {
		return m.RecvSeed
	}
	return nil
}

func (m *C2SHandshakeReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Handshake response
// S->C
type S2CHandshakeRsp struct {
	SendSeed             []byte   `protobuf:"bytes,1,opt,name=send_seed,json=sendSeed,proto3" json:"send_seed,omitempty"`
	RecvSeed             []byte   `protobuf:"bytes,2,opt,name=recv_seed,json=recvSeed,proto3" json:"recv_seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CHandshakeRsp) Reset()         { *m = S2CHandshakeRsp{} }
func (m *S2CHandshakeRsp) String() string { return proto.CompactTextString(m) }
func (*S2CHandshakeRsp) ProtoMessage()    {}
func (*S2CHandshakeRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{7}
}
func (m *S2CHandshakeRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CHandshakeRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CHandshakeRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CHandshakeRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CHandshakeRsp.Merge(dst, src)
}
func (m *S2CHandshakeRsp) XXX_Size() int {
	return m.Size()
}
func (m *S2CHandshakeRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CHandshakeRsp.DiscardUnknown(m)
}

var xxx_messageInfo_S2CHandshakeRsp proto.InternalMessageInfo

func (m *S2CHandshakeRsp) GetSendSeed() []byte {
	if m != nil {
		return m.SendSeed
	}
	return nil
}

func (m *S2CHandshakeRsp) GetRecvSeed() []byte {
	if m != nil {
		return m.RecvSeed
	}
	return nil
}

type S2CKickNotify struct {
	Reason               KickReason `protobuf:"varint,2,opt,name=reason,proto3,enum=proto.common.KickReason" json:"reason,omitempty"`
	Msg                  string     `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *S2CKickNotify) Reset()         { *m = S2CKickNotify{} }
func (m *S2CKickNotify) String() string { return proto.CompactTextString(m) }
func (*S2CKickNotify) ProtoMessage()    {}
func (*S2CKickNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_5e5341ba6b51a72c, []int{8}
}
func (m *S2CKickNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CKickNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CKickNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2CKickNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CKickNotify.Merge(dst, src)
}
func (m *S2CKickNotify) XXX_Size() int {
	return m.Size()
}
func (m *S2CKickNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CKickNotify.DiscardUnknown(m)
}

var xxx_messageInfo_S2CKickNotify proto.InternalMessageInfo

func (m *S2CKickNotify) GetReason() KickReason {
	if m != nil {
		return m.Reason
	}
	return KickReason_KICK_NO_REASON
}

func (m *S2CKickNotify) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*C2SHeader)(nil), "proto.common.C2SHeader")
	proto.RegisterType((*S2CHeader)(nil), "proto.common.S2CHeader")
	proto.RegisterType((*Account)(nil), "proto.common.Account")
	proto.RegisterType((*UserBasic)(nil), "proto.common.UserBasic")
	proto.RegisterType((*ClientInfo)(nil), "proto.common.ClientInfo")
	proto.RegisterType((*SecureInfo)(nil), "proto.common.SecureInfo")
	proto.RegisterType((*C2SHandshakeReq)(nil), "proto.common.C2SHandshakeReq")
	proto.RegisterType((*S2CHandshakeRsp)(nil), "proto.common.S2CHandshakeRsp")
	proto.RegisterType((*S2CKickNotify)(nil), "proto.common.S2CKickNotify")
	proto.RegisterEnum("proto.common.Cmd", Cmd_name, Cmd_value)
	proto.RegisterEnum("proto.common.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("proto.common.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("proto.common.AccountStatus", AccountStatus_name, AccountStatus_value)
	proto.RegisterEnum("proto.common.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("proto.common.KickReason", KickReason_name, KickReason_value)
}
func (m *C2SHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Version))
	}
	if m.Cmd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Cmd))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Seq))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uid))
		i += 8
	}
	if m.ClientInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ClientInfo.Size()))
		n1, err := m.ClientInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cmd != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Cmd))
	}
	if m.Seq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Seq))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Status))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Timestamp))
		i += 8
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Uid))
		i += 8
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Status))
	}
	if m.Basic != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Basic.Size()))
		n2, err := m.Basic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ClientInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.ClientInfo.Size()))
		n3, err := m.ClientInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SecureInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.SecureInfo.Size()))
		n4, err := m.SecureInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBasic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Birthday))
		i += 8
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if m.Gender != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Gender))
	}
	if m.LastLogin != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LastLogin))
		i += 8
	}
	if m.LoginCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.LoginCount))
	}
	if m.Since != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Since))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClientInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.DeviceType))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Timestamp))
		i += 8
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.OsLocale) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.OsLocale)))
		i += copy(dAtA[i:], m.OsLocale)
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if len(m.AppLocale) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AppLocale)))
		i += copy(dAtA[i:], m.AppLocale)
	}
	if len(m.Timezone) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Timezone)))
		i += copy(dAtA[i:], m.Timezone)
	}
	if m.Mcc != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Mcc))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SecureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecureInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LoginIp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LoginIp)))
		i += copy(dAtA[i:], m.LoginIp)
	}
	if m.EmailVerified {
		dAtA[i] = 0x10
		i++
		if m.EmailVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Phone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Phone)))
		i += copy(dAtA[i:], m.Phone)
	}
	if m.PhoneVerified {
		dAtA[i] = 0x20
		i++
		if m.PhoneVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *C2SHandshakeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SHandshakeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SendSeed) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SendSeed)))
		i += copy(dAtA[i:], m.SendSeed)
	}
	if len(m.RecvSeed) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RecvSeed)))
		i += copy(dAtA[i:], m.RecvSeed)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CHandshakeRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHandshakeRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SendSeed) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SendSeed)))
		i += copy(dAtA[i:], m.SendSeed)
	}
	if len(m.RecvSeed) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.RecvSeed)))
		i += copy(dAtA[i:], m.RecvSeed)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *S2CKickNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CKickNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCommon(dAtA, i, uint64(m.Reason))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SHeader) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovCommon(uint64(m.Version))
	}
	if m.Cmd != 0 {
		n += 1 + sovCommon(uint64(m.Cmd))
	}
	if m.Seq != 0 {
		n += 1 + sovCommon(uint64(m.Seq))
	}
	if m.Uid != 0 {
		n += 9
	}
	if m.ClientInfo != nil {
		l = m.ClientInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CHeader) Size() (n int) {
	var l int
	_ = l
	if m.Cmd != 0 {
		n += 1 + sovCommon(uint64(m.Cmd))
	}
	if m.Seq != 0 {
		n += 1 + sovCommon(uint64(m.Seq))
	}
	if m.Status != 0 {
		n += 1 + sovCommon(uint64(m.Status))
	}
	if m.Timestamp != 0 {
		n += 9
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Account) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 9
	}
	if m.Status != 0 {
		n += 1 + sovCommon(uint64(m.Status))
	}
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ClientInfo != nil {
		l = m.ClientInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SecureInfo != nil {
		l = m.SecureInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserBasic) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Birthday != 0 {
		n += 9
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovCommon(uint64(m.Gender))
	}
	if m.LastLogin != 0 {
		n += 9
	}
	if m.LoginCount != 0 {
		n += 1 + sovCommon(uint64(m.LoginCount))
	}
	if m.Since != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClientInfo) Size() (n int) {
	var l int
	_ = l
	if m.DeviceType != 0 {
		n += 1 + sovCommon(uint64(m.DeviceType))
	}
	if m.Timestamp != 0 {
		n += 9
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.OsLocale)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AppLocale)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Mcc != 0 {
		n += 1 + sovCommon(uint64(m.Mcc))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecureInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.LoginIp)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.EmailVerified {
		n += 2
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PhoneVerified {
		n += 2
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2SHandshakeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.SendSeed)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.RecvSeed)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CHandshakeRsp) Size() (n int) {
	var l int
	_ = l
	l = len(m.SendSeed)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.RecvSeed)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CKickNotify) Size() (n int) {
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovCommon(uint64(m.Reason))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientInfo == nil {
				m.ClientInfo = &ClientInfo{}
			}
			if err := m.ClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basic == nil {
				m.Basic = &UserBasic{}
			}
			if err := m.Basic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientInfo == nil {
				m.ClientInfo = &ClientInfo{}
			}
			if err := m.ClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecureInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecureInfo == nil {
				m.SecureInfo = &SecureInfo{}
			}
			if err := m.SecureInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogin", wireType)
			}
			m.LastLogin = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LastLogin = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginCount", wireType)
			}
			m.LoginCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Since = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsLocale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsLocale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLocale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppLocale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcc", wireType)
			}
			m.Mcc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcc |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmailVerified = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneVerified = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SHandshakeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SHandshakeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SHandshakeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendSeed = append(m.SendSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.SendSeed == nil {
				m.SendSeed = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvSeed = append(m.RecvSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvSeed == nil {
				m.RecvSeed = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHandshakeRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHandshakeRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHandshakeRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendSeed = append(m.SendSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.SendSeed == nil {
				m.SendSeed = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvSeed = append(m.RecvSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvSeed == nil {
				m.RecvSeed = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CKickNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CKickNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CKickNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (KickReason(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("common.proto", fileDescriptor_common_5e5341ba6b51a72c) }

var fileDescriptor_common_5e5341ba6b51a72c = []byte{
	// 1296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x41, 0x6f, 0xdb, 0xc6,
	0x12, 0x0e, 0x65, 0x49, 0x16, 0x47, 0x96, 0xbc, 0x6f, 0xed, 0xc4, 0x8c, 0xf3, 0x12, 0x2b, 0x02,
	0x1e, 0x62, 0x18, 0x2f, 0x76, 0xe0, 0x77, 0xca, 0x2d, 0x34, 0xb9, 0xb6, 0x09, 0x51, 0xa4, 0xde,
	0x92, 0x72, 0x9a, 0x5e, 0x08, 0x9a, 0x5a, 0xdb, 0x84, 0x25, 0x92, 0x11, 0x69, 0x03, 0xee, 0xa9,
	0x29, 0x0a, 0xb4, 0x40, 0x4e, 0xed, 0x1f, 0x68, 0x8b, 0xe6, 0x50, 0xf4, 0xde, 0x43, 0x0f, 0x3d,
	0xf4, 0xd6, 0x63, 0x8f, 0x3d, 0x15, 0x45, 0x0e, 0xfd, 0x1d, 0xc5, 0x2e, 0x29, 0xc9, 0x56, 0x83,
	0x02, 0xed, 0x49, 0x33, 0xdf, 0xec, 0xcc, 0x7c, 0xf3, 0x71, 0x76, 0x05, 0x4b, 0x41, 0x3c, 0x1a,
	0xc5, 0xd1, 0x76, 0x32, 0x8e, 0xb3, 0x18, 0x2f, 0x89, 0x9f, 0xed, 0x1c, 0x6b, 0x7f, 0x2b, 0x81,
	0xac, 0xed, 0x3a, 0x87, 0xcc, 0x1f, 0xb0, 0x31, 0x56, 0x60, 0xf1, 0x92, 0x8d, 0xd3, 0x30, 0x8e,
	0x14, 0xa9, 0x25, 0x6d, 0x56, 0xe8, 0xc4, 0xc5, 0x08, 0x16, 0x82, 0xd1, 0x40, 0x29, 0x09, 0x94,
	0x9b, 0x1c, 0x49, 0xd9, 0x4b, 0x65, 0xa1, 0x25, 0x6d, 0x96, 0x29, 0x37, 0x39, 0x72, 0x11, 0x0e,
	0x94, 0x72, 0x4b, 0xda, 0xac, 0x52, 0x6e, 0xe2, 0xa7, 0x50, 0x0f, 0x86, 0x21, 0x8b, 0x32, 0x2f,
	0x8c, 0x4e, 0x62, 0xa5, 0xd2, 0x92, 0x36, 0xeb, 0xbb, 0xca, 0xf6, 0x75, 0x06, 0xdb, 0x9a, 0x38,
	0x60, 0x44, 0x27, 0x31, 0x85, 0x60, 0x6a, 0x63, 0x0c, 0xe5, 0xe3, 0x78, 0x70, 0xa5, 0x54, 0x5b,
	0xd2, 0xe6, 0x12, 0x15, 0x76, 0xfb, 0xb5, 0x04, 0xb2, 0xb3, 0xab, 0x15, 0x64, 0x0b, 0x4a, 0xd2,
	0x9f, 0x28, 0x95, 0x66, 0x94, 0xee, 0x40, 0x35, 0xcd, 0xfc, 0xec, 0x22, 0x15, 0x3c, 0x2b, 0xb4,
	0xf0, 0xf0, 0xbf, 0x41, 0xce, 0xc2, 0x11, 0x4b, 0x33, 0x7f, 0x94, 0x14, 0x84, 0x67, 0x00, 0xaf,
	0x33, 0x4a, 0x4f, 0x05, 0x5d, 0x99, 0x72, 0xf3, 0x9d, 0x6c, 0x7e, 0x91, 0x60, 0x51, 0x0d, 0x82,
	0xf8, 0x22, 0xca, 0x26, 0xa3, 0x4b, 0xb3, 0xd1, 0x67, 0x9d, 0x73, 0x3a, 0x93, 0xce, 0x8f, 0xa1,
	0x72, 0xec, 0xa7, 0x61, 0x20, 0x08, 0xd5, 0x77, 0xd7, 0x6e, 0x8a, 0xd1, 0x4f, 0xd9, 0x78, 0x8f,
	0x87, 0x69, 0x7e, 0x6a, 0x5e, 0xc1, 0xf2, 0xdf, 0x50, 0xf0, 0x29, 0xd4, 0x53, 0x16, 0x5c, 0x8c,
	0xd9, 0x5f, 0x88, 0xef, 0x88, 0x03, 0x79, 0x6a, 0x3a, 0xb5, 0xdb, 0x5f, 0x94, 0x40, 0x9e, 0x52,
	0xc1, 0x4d, 0x28, 0x15, 0xb3, 0x95, 0x69, 0x29, 0x1c, 0xe0, 0x55, 0xa8, 0xb0, 0x91, 0x1f, 0x0e,
	0xc5, 0x64, 0x32, 0xcd, 0x1d, 0xbc, 0x0e, 0xb5, 0x28, 0x0c, 0xce, 0x23, 0x7f, 0xc4, 0xc4, 0x6c,
	0x32, 0x9d, 0xfa, 0x5c, 0x0c, 0xff, 0xd2, 0xcf, 0xfc, 0xb1, 0x18, 0x40, 0xa6, 0x85, 0xc7, 0x73,
	0x8e, 0xc3, 0x71, 0x76, 0x36, 0xf0, 0xaf, 0x04, 0xbf, 0x2a, 0x9d, 0xfa, 0x7c, 0x17, 0x85, 0xb6,
	0xe3, 0x5c, 0x75, 0x99, 0x4e, 0x5c, 0xfc, 0x5f, 0xa8, 0x9e, 0xb2, 0x68, 0xc0, 0xc6, 0xca, 0x62,
	0x4b, 0xda, 0x6c, 0xee, 0xae, 0xde, 0x9c, 0xe9, 0x40, 0xc4, 0x68, 0x71, 0x06, 0xdf, 0x07, 0x18,
	0xfa, 0x69, 0xe6, 0x0d, 0xe3, 0xd3, 0x30, 0x52, 0x6a, 0xf9, 0xb7, 0xe6, 0x88, 0xc9, 0x01, 0xbc,
	0x01, 0x75, 0x11, 0xf1, 0x44, 0x75, 0x45, 0x16, 0x6b, 0x02, 0x02, 0xd2, 0xc4, 0xa7, 0x5d, 0x85,
	0x4a, 0x1a, 0x46, 0x01, 0x53, 0x40, 0xa4, 0xe6, 0x4e, 0xfb, 0x77, 0x09, 0x60, 0xa6, 0x3b, 0xaf,
	0x32, 0x60, 0x97, 0x61, 0xc0, 0xbc, 0xec, 0x2a, 0x61, 0xc5, 0x4e, 0x42, 0x0e, 0xb9, 0x57, 0x09,
	0xbb, 0xb9, 0x70, 0xa5, 0xf9, 0x85, 0x6b, 0x42, 0x29, 0x4e, 0x0b, 0xd5, 0x4a, 0x71, 0x8a, 0xef,
	0x81, 0x1c, 0xa7, 0xde, 0x30, 0x0e, 0xfc, 0x21, 0x2b, 0x24, 0xab, 0xc5, 0xa9, 0x29, 0x7c, 0xde,
	0xcb, 0x4f, 0x12, 0x6f, 0x72, 0x51, 0xf3, 0x2d, 0x05, 0x3f, 0x49, 0x8e, 0x8a, 0xbb, 0x7a, 0x1f,
	0xb8, 0x37, 0x49, 0xcf, 0xc5, 0x93, 0xfd, 0x24, 0x29, 0xf2, 0xd7, 0xa1, 0xc6, 0x3b, 0x7f, 0x10,
	0x47, 0x4c, 0x08, 0x28, 0xd3, 0xa9, 0x2f, 0x36, 0x3f, 0x08, 0x84, 0x4a, 0x15, 0xca, 0xcd, 0xf6,
	0xf7, 0x12, 0xc0, 0x6c, 0x4b, 0xf0, 0x5d, 0xa8, 0xe5, 0x72, 0x85, 0x89, 0x98, 0x52, 0xa6, 0x8b,
	0xc2, 0x37, 0x12, 0xfc, 0x1f, 0x68, 0x8a, 0x4d, 0xe0, 0xcc, 0xc2, 0x93, 0x90, 0xe5, 0xaf, 0x45,
	0x8d, 0x36, 0x04, 0x7a, 0x54, 0x80, 0x5c, 0xcf, 0xe4, 0x8c, 0xf7, 0xce, 0xc7, 0xcd, 0x1d, 0x9e,
	0x2c, 0x8c, 0x59, 0x72, 0x39, 0x4f, 0x16, 0xe8, 0x34, 0x99, 0xdf, 0x2a, 0x16, 0x8c, 0x59, 0x56,
	0x8c, 0x5d, 0x78, 0xbc, 0x68, 0x16, 0x9f, 0xb3, 0xa8, 0x98, 0x36, 0x77, 0xda, 0x3e, 0x2c, 0xf3,
	0xb7, 0xcd, 0x8f, 0x06, 0xe9, 0x99, 0x7f, 0xce, 0x28, 0x7b, 0xc9, 0x95, 0x4d, 0x59, 0x34, 0xf0,
	0x52, 0xc6, 0xf2, 0x95, 0x5e, 0xa2, 0x35, 0x0e, 0x38, 0x8c, 0x0d, 0x78, 0x70, 0xcc, 0x82, 0xcb,
	0x3c, 0x58, 0xca, 0x83, 0x1c, 0x10, 0xc1, 0x69, 0x8b, 0x85, 0xeb, 0x2d, 0x3a, 0xb0, 0xcc, 0x5f,
	0xa4, 0x69, 0x8b, 0x34, 0xf9, 0xe7, 0x2d, 0xda, 0x0e, 0x34, 0x9c, 0x5d, 0xad, 0x13, 0x06, 0xe7,
	0x56, 0x9c, 0x85, 0x27, 0x57, 0xf8, 0x09, 0x54, 0xc7, 0xcc, 0x4f, 0xe3, 0x48, 0x1c, 0x6d, 0xce,
	0xdf, 0x5e, 0x7e, 0x92, 0x8a, 0x38, 0x2d, 0xce, 0x4d, 0x9e, 0xae, 0x85, 0xe9, 0xd3, 0xb5, 0xf5,
	0xab, 0x04, 0x0b, 0xda, 0x68, 0x80, 0x97, 0xa0, 0x46, 0x89, 0x43, 0xe8, 0x11, 0xd1, 0xd1, 0x2d,
	0xbc, 0x02, 0xcd, 0x43, 0xa2, 0x52, 0xd7, 0xdb, 0x23, 0xaa, 0xeb, 0x51, 0xf2, 0x7f, 0xf4, 0xaa,
	0x35, 0x0f, 0x3a, 0x3d, 0xf4, 0x51, 0x0b, 0x23, 0xa8, 0x77, 0x0c, 0xad, 0xe3, 0x59, 0xb6, 0x6b,
	0xec, 0xbf, 0x40, 0x1f, 0xb7, 0x30, 0x86, 0xc6, 0xa1, 0x6a, 0xe9, 0xce, 0xa1, 0xda, 0x21, 0x22,
	0xf5, 0xb3, 0x79, 0xcc, 0xe9, 0xa1, 0xcf, 0x5b, 0x78, 0x19, 0xc0, 0xb4, 0x0f, 0xec, 0x7e, 0x5e,
	0xff, 0xeb, 0x1b, 0x80, 0xd3, 0x43, 0x6f, 0x44, 0x6d, 0x7b, 0x7f, 0xdf, 0x34, 0xac, 0xbc, 0xce,
	0x27, 0x0f, 0x71, 0x03, 0x6a, 0x3d, 0xc3, 0x3a, 0xc8, 0xcb, 0x5e, 0x73, 0x79, 0xc5, 0x87, 0x9c,
	0xa0, 0xd6, 0xd5, 0x3d, 0xcd, 0xee, 0x76, 0x6d, 0xcb, 0x23, 0x96, 0x8e, 0x3e, 0x7c, 0xb6, 0xf5,
	0x23, 0xdf, 0x50, 0xf1, 0xb8, 0x6a, 0xf1, 0x80, 0xe1, 0x06, 0xc8, 0x8e, 0xab, 0xba, 0x7d, 0xc7,
	0xb3, 0x3b, 0xf9, 0xa0, 0x85, 0x6b, 0x58, 0x47, 0xaa, 0x69, 0xe8, 0xe8, 0xcb, 0x0d, 0xce, 0xb6,
	0x00, 0xfb, 0x96, 0xda, 0x77, 0x0f, 0xd1, 0x57, 0x1b, 0x78, 0x0d, 0xf0, 0x14, 0xeb, 0x58, 0xf6,
	0x73, 0xcb, 0xd3, 0xba, 0x3a, 0x7a, 0xb3, 0x71, 0xad, 0x82, 0x6b, 0x74, 0x89, 0xdd, 0x77, 0xd1,
	0x37, 0x1b, 0x58, 0x81, 0x95, 0x09, 0x68, 0xdb, 0x5e, 0x57, 0xb5, 0x5e, 0x08, 0xca, 0x3f, 0x6c,
	0xe0, 0x75, 0xb8, 0x3d, 0x6d, 0xe8, 0x12, 0x6a, 0xa9, 0xa6, 0x47, 0x28, 0xb5, 0x29, 0xfa, 0xf4,
	0xd1, 0x8d, 0x1e, 0xea, 0x91, 0x6a, 0x98, 0xea, 0x9e, 0x49, 0xd0, 0xeb, 0x47, 0x5b, 0xcf, 0xa0,
	0x9a, 0x3f, 0x5b, 0x18, 0x43, 0xf3, 0x80, 0x58, 0x3a, 0xa1, 0x13, 0x1a, 0xe8, 0x16, 0xfe, 0x17,
	0x34, 0x0a, 0x6c, 0x9f, 0x74, 0x55, 0x93, 0x20, 0x09, 0x2f, 0x43, 0xbd, 0x80, 0x04, 0x50, 0xda,
	0xfa, 0x4e, 0x82, 0x46, 0xf1, 0x6f, 0x94, 0x8b, 0x81, 0xef, 0xc2, 0x6d, 0x55, 0xd3, 0xec, 0xbe,
	0xe5, 0x7a, 0x45, 0x53, 0xcb, 0xa6, 0x5d, 0xd5, 0x44, 0xb7, 0xf0, 0x7d, 0xb8, 0x3b, 0x17, 0xa2,
	0xc4, 0x71, 0xa9, 0xa1, 0xb9, 0x44, 0x47, 0xd2, 0x3b, 0x32, 0xf7, 0x54, 0xcb, 0x22, 0x3a, 0x2a,
	0xe1, 0x75, 0xb8, 0x33, 0x17, 0xd2, 0x89, 0x49, 0x78, 0x5a, 0x19, 0xdf, 0x01, 0x3c, 0x9f, 0x66,
	0xbb, 0xa8, 0x86, 0xef, 0xc1, 0xda, 0x1c, 0x6e, 0xef, 0xef, 0x1b, 0x9a, 0xa1, 0x9a, 0x08, 0x6d,
	0x0d, 0x01, 0xf4, 0xd9, 0x33, 0xb9, 0x06, 0x2b, 0x3a, 0x39, 0x32, 0x34, 0xe2, 0xb9, 0x2f, 0x7a,
	0xe4, 0x9a, 0x04, 0x73, 0x81, 0x3d, 0x6a, 0x3f, 0x77, 0x08, 0x45, 0x12, 0x5e, 0x81, 0xe5, 0xeb,
	0x01, 0xc3, 0x76, 0x50, 0x69, 0xfe, 0xb4, 0x6a, 0xe9, 0xd4, 0x36, 0x74, 0xb4, 0xb0, 0xf5, 0x4a,
	0x02, 0x98, 0xdd, 0x1a, 0x2e, 0x76, 0xb1, 0xdb, 0x1e, 0x25, 0xaa, 0x63, 0xf3, 0x4e, 0x0a, 0xac,
	0x0a, 0xcc, 0xb4, 0x0f, 0x0c, 0xcb, 0x23, 0xa6, 0x43, 0x9e, 0x1f, 0x12, 0xca, 0x35, 0x9f, 0x44,
	0x1c, 0xe2, 0x38, 0x06, 0xdf, 0xbf, 0xf7, 0x7a, 0x06, 0x9d, 0xa8, 0x22, 0x22, 0x86, 0x69, 0x92,
	0x03, 0xd5, 0xf4, 0xec, 0x1e, 0xa1, 0xaa, 0x6b, 0xd8, 0x16, 0x5a, 0xe0, 0x5f, 0x4a, 0xc4, 0x0a,
	0x09, 0xcb, 0x7b, 0x4f, 0x7e, 0x7a, 0xfb, 0x40, 0xfa, 0xf9, 0xed, 0x03, 0xe9, 0xb7, 0xb7, 0x0f,
	0xa4, 0xf7, 0xdb, 0xa7, 0x61, 0x76, 0x76, 0x71, 0xcc, 0xaf, 0xf4, 0xce, 0xc8, 0x4f, 0x33, 0x36,
	0x7e, 0x7c, 0xba, 0x73, 0x1a, 0x5f, 0x44, 0xf1, 0x8e, 0xb8, 0xeb, 0x3b, 0xc9, 0xf1, 0x71, 0x55,
	0x58, 0xff, 0xfb, 0x23, 0x00, 0x00, 0xff, 0xff, 0x92, 0xcb, 0x02, 0x90, 0xc9, 0x09, 0x00, 0x00,
}
